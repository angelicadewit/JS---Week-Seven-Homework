{"version":3,"sources":["NumberRangeValidator.js"],"names":["NumberRangeValidator","selector","min","max","numericValue","parseFloat","$field","value","isNaN","errors","push","Validator"],"mappings":";;;;;;;;;;;;IAAMA,oB;;;AAEF,kCAAYC,QAAZ,EAAsBC,GAAtB,EAA2BC,GAA3B,EAA+B;AAAA;;AAAA,gJACrBF,QADqB;;AAE3B,cAAKC,GAAL,GAAWA,GAAX;AACA,cAAKC,GAAL,GAAWA,GAAX;AAH2B;AAI9B;;;;mCACS;AACN;;AAEA,gBAAIC,eAAeC,WAAW,KAAKC,MAAL,CAAYC,KAAvB,CAAnB;AACA,gBAAIC,MAAMJ,YAAN,CAAJ,EAAwB;AACpB,qBAAKK,MAAL,CAAYC,IAAZ;AACH;AACD,gBAAIN,eAAe,KAAKD,GAAxB,EAA4B;AACxB,qBAAKM,MAAL,CAAYC,IAAZ,sCAAoD,KAAKP,GAAzD;AACH;AACD,gBAAIC,eAAe,KAAKF,GAAxB,EAA4B;AACxB,qBAAKO,MAAL,CAAYC,IAAZ,sCAAoD,KAAKR,GAAzD;AACH;AACJ;;;;EApB8BS,S","file":"NumberRangeValidator.js","sourcesContent":["class NumberRangeValidator extends Validator {\n\n    constructor(selector, min, max){\n        super(selector);\n        this.min = min;\n        this.max = max;\n    }\n    validate(){\n        super.validate();\n\n        let numericValue = parseFloat(this.$field.value);\n        if (isNaN(numericValue)){\n            this.errors.push(`must be a number`);\n        } \n        if (numericValue > this.max){\n            this.errors.push(`Number must not be greater than ${this.max}`)\n        }\n        if (numericValue < this.min){\n            this.errors.push(`Number must not be greater than ${this.min}`)\n        }\n    }\n}"]}